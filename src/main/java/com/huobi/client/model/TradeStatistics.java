package com.huobi.client.model;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import com.huobi.client.impl.RestApiJsonParser;
import com.huobi.client.impl.utils.JsonWrapper;
import com.huobi.client.impl.utils.JsonWrapperArray;
import com.huobi.client.impl.utils.TimeService;

/**
 * The summary of trading in the market for the last 24 hours
 */
public class TradeStatistics {

  private long timestamp;
  private BigDecimal open;
  private BigDecimal close;
  private BigDecimal amount;
  private BigDecimal high;
  private BigDecimal low;
  private long count;
  private BigDecimal volume;

  /**
   * Get the UNIX formatted timestamp generated by server in UTC.
   *
   * @return The timestamp
   */
  public long getTimestamp() {
    return timestamp;
  }

  /**
   * Get the opening price of last 24 hours.
   *
   * @return The open price.
   */
  public BigDecimal getOpen() {
    return open;
  }

  /**
   * Get the last price of last 24 hours.
   *
   * @return The last price.
   */
  public BigDecimal getClose() {
    return close;
  }

  /**
   * Get the aggregated trading volume in USDT.
   *
   * @return The aggregated trading volume.
   */
  public BigDecimal getAmount() {
    return amount;
  }

  /**
   * Get the high price of last 24 hours.
   *
   * @return The high price.
   */
  public BigDecimal getHigh() {
    return high;
  }

  /**
   * Get the low price of last 24 hours.
   *
   * @return The low price.
   */
  public BigDecimal getLow() {
    return low;
  }

  /**
   * Get the number of completed trades.
   *
   * @return The number of completed trades.
   */
  public long getCount() {
    return count;
  }

  /**
   * Get the trading volume in base currency of last 24 hours.
   *
   * @return The trading volume in base currency of last 24 hours.
   */
  public BigDecimal getVolume() {
    return volume;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
  }

  public void setOpen(BigDecimal open) {
    this.open = open;
  }

  public void setClose(BigDecimal close) {
    this.close = close;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public void setHigh(BigDecimal high) {
    this.high = high;
  }

  public void setLow(BigDecimal low) {
    this.low = low;
  }

  public void setCount(long count) {
    this.count = count;
  }

  public void setVolume(BigDecimal volume) {
    this.volume = volume;
  }


  public static RestApiJsonParser<TradeStatistics> getParser() {
    return (jsonWrapper -> {
      long ts = TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts"));
      JsonWrapper tick = jsonWrapper.getJsonObject("tick");
      return parse(tick,ts);
    });
  }

  public static RestApiJsonParser<Map<String,TradeStatistics>> getMapParser(){
    return (jsonWrapper -> {
      Map<String, TradeStatistics> map = new HashMap<>();
      JsonWrapperArray dataArray = jsonWrapper.getJsonArray("data");
      long ts = TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts"));
      dataArray.forEach(item -> {
        map.put(item.getString("symbol"), TradeStatistics.parse(item,ts));
      });
      return map;
    });
  }

  public static TradeStatistics parse(JsonWrapper item,long ts){
    TradeStatistics statistics = new TradeStatistics();
    statistics.setTimestamp(ts);
    statistics.setAmount(item.getBigDecimal("amount"));
    statistics.setOpen(item.getBigDecimal("open"));
    statistics.setClose(item.getBigDecimal("close"));
    statistics.setHigh(item.getBigDecimal("high"));
    statistics.setLow(item.getBigDecimal("low"));
    statistics.setCount(item.getLong("count"));
    statistics.setVolume(item.getBigDecimal("vol"));
    return statistics;
  }




}
