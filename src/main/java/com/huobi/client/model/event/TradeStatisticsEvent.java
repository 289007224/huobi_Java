package com.huobi.client.model.event;

import com.huobi.client.impl.ChannelParser;
import com.huobi.client.impl.RestApiJsonParser;
import com.huobi.client.impl.utils.JsonWrapper;
import com.huobi.client.impl.utils.TimeService;
import com.huobi.client.model.TradeStatistics;

/**
 * The 24H trade statistics received by subscription of trade statistics.
 */
public class TradeStatisticsEvent {

  private String symbol;
  private long timeStamp;
  private TradeStatistics tradeStatistics;

  /**
   * Get the symbol you subscribed.
   *
   * @return The symbol, like "btcusdt".
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Get the UNIX formatted timestamp generated by server in UTC.
   *
   * @return The timestamp.
   */
  public long getTimeStamp() {
    return timeStamp;
  }

  /**
   * Get the trade statistics.
   *
   * @return The trade statistics data, see {@link TradeStatistics}
   */
  public TradeStatistics getData() {
    return tradeStatistics;
  }

  public void setTimeStamp(Long timeStamp) {
    this.timeStamp = timeStamp;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public void setData(TradeStatistics tradeStatistics) {
    this.tradeStatistics = tradeStatistics;
  }

  public static RestApiJsonParser<TradeStatisticsEvent> getParser(){
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("ch");
      ChannelParser parser = new ChannelParser(ch);
      TradeStatisticsEvent tradeStatisticsEvent = new TradeStatisticsEvent();
      tradeStatisticsEvent.setSymbol(parser.getSymbol());
      JsonWrapper tick = jsonWrapper.getJsonObject("tick");
      long ts = TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts"));
      tradeStatisticsEvent.setTimeStamp(ts);
      tradeStatisticsEvent.setData(TradeStatistics.parse(tick,ts));
      return tradeStatisticsEvent;
    };
  }
  public static RestApiJsonParser<TradeStatisticsEvent> getReqParser(){
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("rep");
      ChannelParser parser = new ChannelParser(ch);
      TradeStatisticsEvent tradeStatisticsEvent = new TradeStatisticsEvent();
      tradeStatisticsEvent.setSymbol(parser.getSymbol());
      JsonWrapper tick = jsonWrapper.getJsonObject("data");
      long ts = TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts"));
      tradeStatisticsEvent.setTimeStamp(ts);
      tradeStatisticsEvent.setData(TradeStatistics.parse(tick,ts));
      return tradeStatisticsEvent;
    };
  }

}
