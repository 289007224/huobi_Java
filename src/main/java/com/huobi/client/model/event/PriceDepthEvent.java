package com.huobi.client.model.event;

import java.util.LinkedList;
import java.util.List;

import com.huobi.client.impl.ChannelParser;
import com.huobi.client.impl.RestApiJsonParser;
import com.huobi.client.impl.utils.JsonWrapper;
import com.huobi.client.impl.utils.JsonWrapperArray;
import com.huobi.client.impl.utils.TimeService;
import com.huobi.client.model.DepthEntry;
import com.huobi.client.model.PriceDepth;

/**
 * The price depth received by subscription of price depth.
 */
public class PriceDepthEvent {

  private String symbol;
  private Long timestamp;
  private PriceDepth data;

  /**
   * Get the symbol you subscribed.
   *
   * @return The symbol, like "btcusdt".
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Get the UNIX formatted timestamp generated by server in UTC.
   *
   * @return The timestamp.
   */
  public long getTimestamp() {
    return timestamp;
  }

  /**
   * Get the price depth.
   *
   * @return The price depth data, see {@link PriceDepth}
   */
  public PriceDepth getData() {
    return data;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public void setData(PriceDepth data) {
    this.data = data;
  }

  public static RestApiJsonParser<PriceDepthEvent> getReqParser() {
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("rep");
      ChannelParser parser = new ChannelParser(ch);
      return convert(jsonWrapper, parser);
    };
  }

  public static RestApiJsonParser<PriceDepthEvent> getParser() {
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("ch");
      ChannelParser parser = new ChannelParser(ch);
      return convert(jsonWrapper, parser);
    };
  }

  public static PriceDepthEvent convert(JsonWrapper jsonWrapper, ChannelParser parser) {
    PriceDepthEvent priceDepthEvent = new PriceDepthEvent();
    priceDepthEvent.setTimestamp(TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts")));
    priceDepthEvent.setSymbol(parser.getSymbol());
    PriceDepth priceDepth = new PriceDepth();
    JsonWrapper tick = jsonWrapper.getJsonObject("tick");
    priceDepth.setTimestamp(TimeService.convertCSTInMillisecondToUTC(tick.getLong("ts")));
    List<DepthEntry> bidList = new LinkedList<>();
    JsonWrapperArray bids = tick.getJsonArray("bids");
    bids.forEachAsArray((item) -> {
      bidList.add(DepthEntry.parse(item));
    });
    List<DepthEntry> askList = new LinkedList<>();
    JsonWrapperArray asks = tick.getJsonArray("asks");
    asks.forEachAsArray((item) -> {
      askList.add(DepthEntry.parse(item));
    });
    priceDepth.setAsks(askList);
    priceDepth.setBids(bidList);
    priceDepthEvent.setData(priceDepth);
    return priceDepthEvent;
  }


}
