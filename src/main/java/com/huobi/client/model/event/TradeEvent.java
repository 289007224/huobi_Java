package com.huobi.client.model.event;

import com.huobi.client.impl.ChannelParser;
import com.huobi.client.impl.RestApiJsonParser;
import com.huobi.client.impl.utils.JsonWrapper;
import com.huobi.client.impl.utils.JsonWrapperArray;
import com.huobi.client.impl.utils.TimeService;
import com.huobi.client.model.Trade;
import com.huobi.client.model.enums.TradeDirection;

import java.util.LinkedList;
import java.util.List;

/**
 * The trade received by subscription of trade.
 */
public class TradeEvent {

  private String symbol;
  private Long timestamp;
  private List<Trade> tradeList;

  /**
   * Get the symbol you subscribed.
   *
   * @return The symbol, like "btcusdt".
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Get the UNIX formatted timestamp generated by server in UTC.
   *
   * @return The timestamp.
   */
  public long getTimestamp() {
    return timestamp;
  }

  /**
   * Get the trade.
   *
   * @return The trade data, see {@link Trade}
   */
  public List<Trade> getTradeList() {
    return tradeList;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public void setTradeList(List<Trade> tradeList) {
    this.tradeList = tradeList;
  }

  public static RestApiJsonParser<TradeEvent> getParser(){
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("ch");
      ChannelParser parser = new ChannelParser(ch);
      TradeEvent tradeEvent = new TradeEvent();
      tradeEvent.setSymbol(parser.getSymbol());
      tradeEvent.setTimestamp(TimeService.convertCSTInMillisecondToUTC(jsonWrapper.getLong("ts")));
      JsonWrapper tick = jsonWrapper.getJsonObject("tick");
      JsonWrapperArray dataArray = tick.getJsonArray("data");
      List<Trade> trades = new LinkedList<>();
      dataArray.forEach((item) -> {
        trades.add(Trade.parse(item));
      });
      tradeEvent.setTradeList(trades);
      return tradeEvent;
    };
  }

  public static RestApiJsonParser<TradeEvent> getReqParser(){
    return (jsonWrapper) -> {
      String ch = jsonWrapper.getString("rep");
      ChannelParser parser = new ChannelParser(ch);
      TradeEvent tradeEvent = new TradeEvent();
      tradeEvent.setSymbol(parser.getSymbol());
      List<Trade> trades = new LinkedList<>();
      JsonWrapperArray dataArray = jsonWrapper.getJsonArray("data");
      dataArray.forEach((item) -> {
        trades.add(Trade.parse(item));
      });
      tradeEvent.setTradeList(trades);
      return tradeEvent;
    };
  }
}
